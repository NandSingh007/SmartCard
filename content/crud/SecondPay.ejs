
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<style>
    .approve-button {
    background-color: #48bb78; /* Tailwind's bg-green-500 color */
    color: white;
    border-radius: 8px;
    padding: 0.5rem 1rem; /* Vertical and horizontal padding */
    font-size: 0.875rem; /* text-sm */
    font-weight: 500; /* font-medium */
    transition: background-color 0.3s ease; /* Smooth transition for hover effect */
}

.approve-button:hover {
    background-color: #2f855a; /* Tailwind's bg-green-700 color */
}

.approve-button:focus {
    outline: none;
    box-shadow: 0 0 0 4px rgba(72, 187, 120, 0.4); /* Tailwind's focus:ring-green-300 */
}

</style>
<div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5 dark:bg-gray-800 dark:border-gray-700">
    <div class="w-full mb-1">
        <div class="mb-4">
           
            <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">All users</h1>
        </div>
        <div class="sm:flex">
            <div class="items-center hidden mb-3 sm:flex sm:divide-x sm:divide-gray-100 sm:mb-0 dark:divide-gray-700">
                <form class="lg:pr-3" action="#" method="GET">
                <label for="users-search" class="sr-only">Search</label>
                <div class="relative mt-1 lg:w-64 xl:w-96">
                    <input type="text" name="email" id="users-search" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Search for users">
                </div>
                </form>
               
            </div>
            <div class="flex items-center ml-auto space-x-2 sm:space-x-3">
              
                <a href="#" class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 sm:w-auto dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700">
                    <svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z" clip-rule="evenodd"></path></svg>
                    Export
                </a>
            </div>
        </div>
    </div>
</div>
<div class="flex flex-col">
    <div class="overflow-x-auto">
        <div class="inline-block min-w-full align-middle">
            <div class="overflow-hidden shadow">
                <table class="min-w-full divide-y divide-gray-200 table-fixed dark:divide-gray-600">
                    <thead class="bg-gray-100 dark:bg-gray-700">
                        <tr>
                           
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
                                Name
                            </th>
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
                               number
                            </th>
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
                                email
                            </th>
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
                                city
                            </th>
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
                                Plan
                            </th>
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
                                Request
                            </th>
                          
                            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody id="table-body" class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
                        <!-- Dynamic rows will be inserted here -->
                    </tbody>
                    
                </table>
            </div>
        </div>
    </div>
</div>

<div class="sticky bottom-0 right-0 items-center w-full p-4 bg-white border-t border-gray-200 sm:flex sm:justify-between dark:bg-gray-800 dark:border-gray-700">
    <div class="flex items-center mb-4 sm:mb-0">
        <a href="#" class="inline-flex justify-center p-1 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
            <svg class="w-7 h-7" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>
        </a>
        <a href="#" class="inline-flex justify-center p-1 mr-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
            <svg class="w-7 h-7" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
        </a>
        <span class="text-sm font-normal text-gray-500 dark:text-gray-400">Showing <span class="font-semibold text-gray-900 dark:text-white">1-20</span> of <span class="font-semibold text-gray-900 dark:text-white">2290</span></span>
    </div>
    <div class="flex items-center space-x-3">
        <a href="#" class="inline-flex items-center justify-center flex-1 px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
            <svg class="w-5 h-5 mr-1 -ml-1"" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>
            Previous
        </a>
        <a href="#" class="inline-flex items-center justify-center flex-1 px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
            Next
            <svg class="w-5 h-5 ml-1 -mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
        </a>
    </div>
</div>

<!-- Edit User Modal -->
<div class="fixed left-0 right-0 z-50 items-center justify-center hidden overflow-x-hidden overflow-y-auto top-4 md:inset-0 h-modal sm:h-full" id="edit-user-modal">
    <div class="relative w-full h-full max-w-2xl px-4 md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow dark:bg-gray-800">
            <!-- Modal header -->
            <div class="flex items-start justify-between p-5 border-b rounded-t dark:border-gray-700">
                <h3 class="text-xl font-semibold dark:text-white">
                    Edit user
                </h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-700 dark:hover:text-white" data-modal-toggle="edit-user-modal">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>  
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6 space-y-6">
                <form action="#">
                    <div class="grid grid-cols-6 gap-6">
                        <div class="col-span-6 sm:col-span-3">
                            <label for="first-name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">First Name</label>
                            <input type="text" name="first-name" value="Bonnie" id="first-name" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Bonnie" required>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <label for="last-name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Last Name</label>
                            <input type="text" name="last-name" value="Green" id="last-name" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Green" required>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
                            <input type="email" name="email" value="bonnie@flowbite.com" id="email" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="example@company.com" required>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <label for="position" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Position</label>
                            <input type="text" name="position" value="React Developer" id="position" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="e.g. React developer" required>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <label for="current-password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Current Password</label>
                            <input type="password" name="current-password" value="••••••••" id="current-password" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="••••••••" required>
                        </div>
                        <div class="col-span-6 sm:col-span-3">
                            <label for="new-password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">New Password</label>
                            <input type="password" name="new-password" value="••••••••" id="new-password" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="••••••••" required>
                        </div>
                        <div class="col-span-6">
                            <label for="biography" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Biography</label>
                            <textarea id="biography" rows="4" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="👨‍💻Full-stack web developer. Open-source contributor.">👨‍💻Full-stack web developer. Open-source contributor.</textarea>
                        </div>
                    </div> 
                </div>
                <!-- Modal footer -->
                <div class="items-center p-6 border-t border-gray-200 rounded-b dark:border-gray-700">
                    <button class="text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800" type="submit">Save all</button>
                </div>
            </form>
        </div>
    </div>
</div><!-- Delete User Modal -->
<!-- Delete Modal --><!-- Delete Modal -->
<!-- Delete Modal -->
<div class="fixed inset-0 z-50 flex items-center justify-center hidden overflow-x-hidden overflow-y-auto bg-gray-800 bg-opacity-50" id="delete-user-modal">
    <div class="relative w-full max-w-md px-4">
        <div class="relative bg-white rounded-lg shadow dark:bg-gray-600">
            <div class="flex justify-end p-2">
                <button type="button" class="text-gray-400 hover:bg-gray-200 rounded-lg text-sm p-1.5 dark:hover:bg-gray-700" data-modal-hide="delete-user-modal">
                    <svg class="w-5 h-5" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
            <div class="p-6 text-center">
                <svg class="w-16 h-16 mx-auto text-red-600" fill="none" stroke="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <h3 class="mt-5 mb-6 text-lg text-gray-500 dark:text-gray-400">Are you sure you want to delete this user?</h3>
                <button id="confirm-delete" class="text-white bg-red-600 hover:bg-red-800 rounded-lg px-3 py-2.5 mr-2 dark:focus:ring-red-800">
                    Yes, I'm sure
                </button>
                <button class="text-gray-900 bg-white hover:bg-gray-100 rounded-lg px-3 py-2.5 dark:hover:bg-gray-700 dark:text-gray-400 dark:bg-gray-800" data-modal-hide="delete-user-modal">
                    No, cancel
                </button>
            </div>
        </div>
    </div>
</div>


<!-- JavaScript to Fetch Data and Populate Table -->
<script>
    // alert("hi")
    // Fetch API data
    async function fetchData() {
    try {
        const response = await fetch('https://smartpaycard.in/identityUserData'); // Replace with your API URL
        const data = await response.json();
    
        // Call function to populate the table with data
        populateTable(data.userData);
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}

// Populate table with dynamic data
function populateTable(userData) {
    const tableBody = document.getElementById('table-body');
    tableBody.innerHTML = ''; // Clear existing table rows

    // Check if userData is an object, then convert it into an array for easier looping
    const userArray = Array.isArray(userData) ? userData : [userData];

    userArray.forEach(user => {
        // Only render rows where FirstPayStatus is 0

        if (user.SecondPayStatus === 0) {
    // Create a new table row
    const row = document.createElement('tr');
    row.innerHTML = `
        <td class="p-4 text-sm text-gray-900 dark:text-white">${user.name}</td>
        <td class="p-4 text-sm text-gray-900 dark:text-white">${user.number}</td>
        <td class="p-4 text-sm text-gray-900 dark:text-white">${user.email}</td>
        <td class="p-4 text-sm text-gray-900 dark:text-white">${user.city}</td>
 <td class="p-4 text-sm text-gray-900 dark:text-white">
     <select class="p-2 bg-gray-100 rounded dark:bg-gray-700" data-user-id="${user.UserId}" aria-label="Select Insurance">
            <option value="">Select Plan</option>
          </select>
</td>

    <td><button class="approve-button" data-id="${user.UserId}" aria-label="Approve">
    Approve
</button></td>
 <td class="flex p-4 space-x-2 text-sm text-gray-900 dark:text-white">
            <!-- Eye Icon for View -->
            <button class="text-blue-500 hover:text-blue-700 view-button" data-id="${user.UserId}" aria-label="View">
                <i class="fas fa-eye"></i>
            </button>
            
            <!-- Delete Icon for Delete -->
            <button class="text-red-500 hover:text-red-700 delete-button" data-id="${user.UserId}" aria-label="Delete">
                <i class="fas fa-trash-alt"></i>
            </button>
            
                </td>
    `;

    // Append the row to the table body
    tableBody.appendChild(row);
        }
    });

    // Get all view buttons, delete buttons, and modal elements
    const viewButtons = document.querySelectorAll('.view-button');
    const deleteButtons = document.querySelectorAll('.delete-button');
    const modal = document.getElementById('delete-user-modal');
    const closeButtons = modal.querySelectorAll('[data-modal-hide="delete-user-modal"]');
    let selectedUserId = null;

    // Function to show modal
    const showModal = () => {
        modal.classList.remove('hidden');
        modal.classList.add('flex');
    };

    // Function to hide modal
    const hideModal = () => {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
    };

    // Add event listener to view buttons
    viewButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            const userId = e.currentTarget.getAttribute('data-id');
            // Redirect to the user's details page
            window.location.href = `/crud/user/${userId}`;
        });
    });

    // Add event listener to delete buttons
    deleteButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            // Get the user ID from the button's data-id attribute
            selectedUserId = e.currentTarget.getAttribute('data-id');
            showModal();
        });
    });

    // Event listener for modal close buttons
    closeButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            hideModal();
        });
    });

    // Event listener for the modal background click to close the modal
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            hideModal();
        }
    });

    // Confirm deletion of the user when the "Yes, I'm sure" button is clicked
    const confirmDeleteButton = document.getElementById('confirm-delete');
    confirmDeleteButton.addEventListener('click', () => {
        if (selectedUserId) {
            alert(`User with ID: ${selectedUserId} has been deleted.`);
            // Here you can call an API or function to delete the user
            // Example: deleteUser(selectedUserId);
            hideModal(); // Hide the modal after confirming
        }
    });
}



// Function to handle the Approve button click
// Handle the "Approve" button click event
async function handleApproveButtonClick(event) {
    const button = event.target.closest('.approve-button'); // Ensure the clicked element is an "Approve" button
    if (!button) return; // Exit if the clicked element is not an "Approve" button

    const userId = button.getAttribute('data-id'); // Get UserId from the button's data attribute

    // Find the associated dropdown for the user
    const dropdown = document.querySelector(`select[data-user-id="${userId}"]`);
    if (!dropdown) {
        alert('Dropdown not found for the selected user.');
        return;
    }

     const selectedOptionText = dropdown.options[dropdown.selectedIndex].textContent; // Get the text of the selected option

    // if (!selectedOptionValue) {
    //     alert('Please select a plan before approving.');
    //     return;
    // }
  console.log('Selected Option Text:', selectedOptionText,"userId",userId); // This is the bankName and amount text

    try {
        // Call the API to update the user's status
        const response = await fetch('https://smartpaycard.in/Secondstatus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId, // Send the UserId
                status: 1, // Send status (1 for approved)
                selectedPlanText: selectedOptionText // Send the selected plan's text (bankName - amount)
            }),
        });

        const result = await response.json();

        if (response.ok) {
            // Find the row of the user and remove it from the table after approval
            const row = button.closest('tr');
            row.remove(); // Remove the row from the DOM
        } else {
            alert(`Select Plan`);
        }
    } catch (error) {
        console.error('Error approving user:', error);
        alert('An error occurred while approving the user.');
    }
}

// Attach a global event listener for "Approve" button clicks
document.addEventListener('click', handleApproveButtonClick);


// Fetch and populate insurance data
async function fetchInsuranceData() {
  try {
    // Fetch data from the API
    const response = await fetch('https://smartpaycard.in/getAllInsuranceData'); // Replace with your actual API URL
    if (!response.ok) {
      throw new Error('Failed to fetch insurance data');
    }
    const result = await response.json();

    // Check if the data is valid
    if (result && result.data && Array.isArray(result.data)) {
      const insuranceData = result.data;

      // Query all dropdowns with the data-user-id attribute
      const dropdowns = document.querySelectorAll('select[data-user-id]');
      console.log(dropdowns, "Dropdowns found in the DOM");

      // Populate each dropdown with insurance plans
      dropdowns.forEach((dropdown) => {
  dropdown.innerHTML = `<option value="">Select Plan</option>`; // Clear existing options

  insuranceData.forEach((item) => {
    const option = document.createElement('option');
    option.value = item._id; // Set the unique ID as the option value
    option.textContent = `${item.bankName} - ${item.amount}`; // Set option text
    dropdown.appendChild(option);
  });
});

    } else {
      console.error('Invalid data format received from the API');
    }
  } catch (error) {
    console.error('Error fetching insurance data:', error);
  }
}

// Populate table and fetch insurance data after DOM is loaded
document.addEventListener("DOMContentLoaded", async () => {
  try {
    // Fetch user data and populate the table
    await fetchData(); // Assuming fetchData populates the table

    // Fetch and populate insurance plans in dropdowns
    fetchInsuranceData();
  } catch (error) {
    console.error('Error initializing the application:', error);
  }
});


</script>